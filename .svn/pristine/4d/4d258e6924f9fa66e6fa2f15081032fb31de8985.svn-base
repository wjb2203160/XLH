package com.mtr.psn.controller.user;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.mtr.psn.common.Constants;
import com.mtr.psn.common.RedisAPI;
import com.mtr.psn.controller.BaseController;
import com.mtr.psn.model.Menu;
import com.mtr.psn.model.user.Authority;
import com.mtr.psn.model.user.Function;
import com.mtr.psn.model.user.User;
import com.mtr.psn.service.user.FunctionService;
import com.mtr.psn.service.user.UserService;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

@Controller
public class LoginController extends BaseController {

	@Resource
	private UserService userService;
	@Resource
	private RedisAPI redisAPI;
	@Resource
	private FunctionService functionService;
	
	
	@RequestMapping("/main.html")
	public ModelAndView main(HttpSession session){
		logger.debug("main*****************");
		//menu list
		User user = this.getCurrentUser();
		List<Menu> mList = null;
		if(null != user){
			Map<String, Object> model = new HashMap<String, Object>();
			model.put("user", user);
			/*
			 * 自定义key的规则
			 * key：menuList+ roleId---eg："menulist2"
			 * value:mList
			 */
			//redis里有没有数据
			//if(!redisAPI.exist("menuList" +user.getRoleId())){
				//根据当前用户获取菜单列表mList
				mList = getFuncByCurrentUser(user.getRoleId());
				//json
				if(mList != null){
					JSONArray jsonArray = JSONArray.fromObject(mList);
					String jsonString = jsonArray.toString();
					//logger.debug("==================jsonString:"+jsonString);
					model.put("mList", jsonString);
				//	redisAPI.set("menuList"+user.getRoleId(), jsonString);
				}
			/*}else{//redis里有数据，直接取
				String redisMenuListKeyString = redisAPI.get("menuList"+user.getRoleId());
				logger.debug("==========redis:"+redisMenuListKeyString);
				if(redisMenuListKeyString != null && !redisMenuListKeyString.equals("")){
					model.put("mList", redisMenuListKeyString);
				}else{
					return new ModelAndView("redirect:/");
				}
			}*/
			session.setAttribute(Constants.SESSION_BASE_MODEL, model);
			return new ModelAndView("main",model);
		}
		return new ModelAndView("redirect:/");
	}
	
	/**
	 * 根据当前用户角色id获取功能列表（对应的菜单）
	 * @param roleId
	 * @return
	 */
	protected List<Menu> getFuncByCurrentUser(Integer roleId) {
		List<Menu> menuList = new ArrayList<Menu>();
		Authority authority = new Authority();//功能类
		authority.setRoleId(roleId);
		try {
			List<Function> mList = functionService.getMainFunctionList(authority);
			if(mList != null){
				for(Function function : mList){//将功能放入菜单里
					Menu menu = new Menu();//一个menu由主菜单和子菜单构成
					menu.setMainMenu(function);
					function.setRoleId(roleId);
					//主菜单对应的子菜单
					List<Function> subList = functionService.getSubFunctionList(function);
					if(null != subList){
						menu.setSubMenus(subList);
					}
					menuList.add(menu);
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		return menuList;
	}
	
	@RequestMapping("/login.html")
	@ResponseBody
	public Object login(HttpSession session,@RequestParam String user){
		if(user == null || user.equals("")){
			return "nodata";
		}else{
			JSONObject userObject = JSONObject.fromObject(user);
			User userObj = (User)userObject.toBean(userObject, User.class);
			try {
				//验证
				User _user = userService.selectByPhone(userObj.getCellphone());
				if(_user == null){//不存在这个登陆账号
					return "nologincode";
				}else{
					if(_user.getPassword().equals(userObj.getPassword())){//登陆成功
						//存到session中
						session.setAttribute(Constants.SESSION_USER, _user);
						logger.debug("--------------User:"+ _user.getCellphone() +"==="+ _user.getUserName());
						//更新当前用户登录的lastLoginTime.
						_user.setLastLoginTime(new Date());
						userService.psn_update(_user);//更新
						return "success";
					}else{//密码错误
						return "pwderror";
					}
				}
			} catch (Exception e) {
				return "failed";
			}
		}
	}
	
	/* 
	 * 注销
	 * @param session
	 * @return
	 */
	@RequestMapping("/logout.html")
	public String logout(HttpSession session){
		session.removeAttribute(Constants.SESSION_USER);
		session.invalidate();
		this.setCurrentUser(null);
		return "login";
	}
	
	
}
